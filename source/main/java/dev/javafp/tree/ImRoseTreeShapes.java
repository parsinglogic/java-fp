/*
 * Copyright (c) 2012 Adrian Van Emmenis
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package dev.javafp.tree;

import dev.javafp.ex.ImIndexOutOfBoundsException;
import dev.javafp.func.Fn;
import dev.javafp.func.Fn2;
import dev.javafp.lst.ImList;
import dev.javafp.lst.Range;

public class ImRoseTreeShapes
{

    private static Fn<ImList<ImRoseTree<String>>, ImRoseTree<String>> zWithNodes = ns -> ImRoseTree.withNodes("z", ns);

    private ImRoseTreeShapes()
    {

    }

    public static ImRoseTree<String> relabelTree(ImRoseTree<String> treeToRelabel)
    {
        return relabelTreeUsingFactory(new LabelFactory(), treeToRelabel);
    }

    public static ImRoseTree<String> relabelTreeUsingFactory(LabelFactory labelFactory,
            ImRoseTree<String> treeToRelabel)
    {
        String myLabel = labelFactory.getLabel();
        return ImRoseTree.withNodes(myLabel, relabelForest(treeToRelabel.getSubTrees(), labelFactory));
    }

    private static ImList<ImRoseTree<String>> relabelForest(ImList<ImRoseTree<String>> trees, LabelFactory labelFactory)
    {
        Fn2<LabelFactory, ImRoseTree<String>, ImRoseTree<String>> f2 = ImRoseTreeShapes::relabelTreeUsingFactory;
        return trees.map(f2.ofFirst(labelFactory));
    }

    public static class LabelFactory
    {
        /**
         * <h2>the labels at each level a1 |</h2>
         * <p> b1 b2     b3
         * |      |
         * -----  -----
         * c1 c2  c3 c4
         *
         */
        private int count = 0;

        public String getLabel()
        {
            return "" + (++count);
        }
    }

    /**
     * <p> So the algorithm to generate all trees with size n is so recursive it makes your head explode.
     * <p> The first observation is that all trees of size n (n >= 1) are generated by a root node and then all forests
     * of size n - 1 under that root node.
     * <p> So how do we generate all forests of size n (n ≥ 0) ?
     * <p> if n == 0 then there is only one forest - the empty list
     * <p> otherwise...
     * <p> Consider the first tree of the forest. That tree can have a size s (1 ≤ s ≤ n)
     * <p> For every possible tree of size s we pair it with every possible forest of size  n - s
     *
     */
    public static ImList<ImRoseTree<String>> allTreesWithSize(int treeSize)
    {
        ImIndexOutOfBoundsException.check(treeSize, 1, Integer.MAX_VALUE, "treeSize");
        return allTreesWithSize$(treeSize).map(ImRoseTreeShapes::relabelTree);
    }

    private static ImList<ImRoseTree<String>> allTreesWithSize$(int n)
    {
        return n == 1
               ? ImList.on(ImRoseTree.leaf("z"))
               : allForestsWithSize(n - 1).map(zWithNodes);
    }

    /**
     * <p> See the comments on ::allTreesWithSize
     */
    private static ImList<ImList<ImRoseTree<String>>> allForestsWithSize(int n)
    {
        /**
         * <p> Consider the first tree of the forest. It has size t (1 ≤ t ≤ n)
         * <p> firstTree
         * |
         * <p> t1   t2 t3 .. tn
         *
         * <pre>{@code
         *     |          |
         *     -----------
         *         |
         *     otherTrees
         * }</pre>
         * <p> There will be several possible trees of size t. For each of these trees there
         * will be n -t nodes left. We form all possible forests of size n - t and then
         * we need to 'cross' these two sets.
         * <p> So for each set of trees of size t,
         * we need to form the cartesian product of this set with the set of forests with size n - t
         * <p> [t1, t2] x [[t3, t4], [t5, t6]]
         * <p> (t1, [t3, t4])
         * (t1, [t5, t6])
         * (t2, [t3, t4])
         * (t2, [t5, t6])
         * <p> and then we need to form a list from each pair:
         * <p> [t1, t3, t4]
         * [t1, t5, t6]
         * [t2, t3, t4]
         * [t2, t5, t6]
         *
         */

        return n == 0
               ? ImList.on(ImList.on())
               : Range.oneTo(n).flatMap(i -> ImList.cartesianProduct(allTreesWithSize$(i), allForestsWithSize(n - i), ImList::cons));
    }
}